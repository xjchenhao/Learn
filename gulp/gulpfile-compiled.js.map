{"version":3,"sources":["gulpfile.js"],"names":[],"mappings":";;;AACA,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;;AACtB,CAAC,GAAG,OAAO,CAAC,mBAAmB,CAAC,EAAE;;AAClC,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI;;AAC5B,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC;;AACpB,aAAa,GAAG,OAAO,CAAC,kBAAkB,CAAC;;AAC3C,WAAW,GAAG,OAAO,CAAC,gBAAgB,CAAC;;AACvC,aAAa,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;;;;;AAKnD,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,MAAM,CAAA,AAAC;;AAChC,IAAI,GAAG,IAAI,CAAC,CAAC,IAAI,IAAI;;AACrB,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;;AACrB,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;;AAErB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY;;CAEhC,CAAC,CAAC;;AAEH,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,EAAE,YAAY;;AAE5C,QAAI,CAAC,GAAG,CAAC,IAAI,GAAG,qBAAqB,CAAC,CACjC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;AAG3B,QAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AAC5C,WAAO,OAAO;;AAEV,YAAQ,EACN,UAAS,GAAG,EAAE,KAAK,EAAE;;;;;;KAMtB,CAAC,CAAC;CACV,CAAC,CAAC;;AAEH,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,YAAY;;AAE/B,QAAI,eAAe,GAAG,CAAC,CAAC,MAAM,CAAC,uBAAuB,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;QACpE,eAAe,GAAG,CAAC,CAAC,MAAM,CAAC,6BAA6B,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;;AAE/E,WAAO,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CACtB,IAAI,CAAC,eAAe,CAAC,CACrB,IAAI,CAAC,aAAa,EAAE,CAAC,CACrB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAE7B,IAAI,CAAC,eAAe,CAAC,CACrB,IAAI,CAAC,WAAW,EAAE,CAAC,CACnB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAE7B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;CAC9B,CAAC,CAAC;;AAEH,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACjC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY;AAC7B,QAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AAC5C,WAAO,OAAO;;AAEV,YAAQ,EACN,UAAS,GAAG,EAAE,KAAK,EAAE;;;;;;KAMtB,CAAC,CAAC;CACV,CAAC,CAAC;;;AAGH,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY;;;;AAI5B,QAAI,KAAK,EAAE;AACP,WAAG,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;KACxB;;AAED,KAAC,CAAC,OAAO,CAAC,MAAM,CAAC;AACb,YAAI,EAAE,IAAI;AACV,kBAAU,EAAE,UAAU;AACtB,YAAI,EAAE,IAAI;KACb,CAAC,CAAC;CACN,CAAC,CAAC","file":"gulpfile-compiled.js","sourcesContent":["//--------------------------------------------------[引入依赖]\nvar gulp = require('gulp'),                         //引入gulp\n    $ = require('gulp-load-plugins')(),             //动态载入依赖\n    args = require('yargs').argv,                   //获取CLI参数\n    del = require('del'),                           //删除文件&文件夹\n    fisToGulpHtml = require('./fisToGulp-html'),      //fis的html特性移植\n    fisToGulpJs = require('./fisToGulp-js'),          //fis的js特性移植\n    webpackConfig = require(\"./webpack.config.js\"); //引入webpack的配置\n\n//--------------------------------------------------[任务流配置]\n\n//--------------------------------------------------[CLI接口]\nvar root = './' + (args.d || '.www'),   //服务器运行目录\n    port = args.p || 8080,              //端口号\n    livereload = !!args.l,              //是否动态刷新\n    clear = !!args.c;                   //是否清除目录\n\ngulp.task('default', function () {\n    // 将你的默认的任务代码放在这\n});\n\ngulp.task('release', ['fisToGulp'], function () {\n\n    gulp.src(root + '/views/pages/*.html')\n        .pipe(gulp.dest(root));\n\n\n    var myConfig = Object.create(webpackConfig);\n    return webpack(\n        // configuration\n        myConfig\n        , function(err, stats) {\n            // if(err) throw new gutil.PluginError(\"webpack\", err);\n            // gutil.log(\"[webpack]\", stats.toString({\n            //\t // output options\n            // }));\n            //callback();\n        });\n});\n\ngulp.task('fisToGulp', function () {\n\n    var filterViewsHtml = $.filter('**/views/pages/*.html', {restore: true}),\n        filterRouteFile = $.filter('**/script/{route,page}/*.js', {restore: true});\n\n    return gulp.src('./app/**')\n        .pipe(filterViewsHtml)\n        .pipe(fisToGulpHtml())\n        .pipe(filterViewsHtml.restore)\n\n        .pipe(filterRouteFile)\n        .pipe(fisToGulpJs())\n        .pipe(filterRouteFile.restore)\n\n        .pipe(gulp.dest(root));\n});\n\nvar webpack = require(\"webpack\");\ngulp.task('webpack', function () {\n    var myConfig = Object.create(webpackConfig);\n    return webpack(\n        // configuration\n        myConfig\n        , function(err, stats) {\n            // if(err) throw new gutil.PluginError(\"webpack\", err);\n            // gutil.log(\"[webpack]\", stats.toString({\n            //\t // output options\n            // }));\n            //callback();\n        });\n});\n\n//启动一个Web服务器\ngulp.task('server', function () {\n\n    //$.connect.serverClose();\n\n    if (clear) {\n        del.sync(root + '/');\n    }\n\n    $.connect.server({\n        root: root,\n        livereload: livereload,\n        port: port\n    });\n});\n"]}