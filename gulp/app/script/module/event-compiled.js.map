{"version":3,"sources":["event.js"],"names":[],"mappings":"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","file":"event-compiled.js","sourcesContent":["/* 事件模块    1.0.0*/\n(function (root, factory) {\n    if (typeof define === 'function' && (define.amd || define.cmd)) {\n        define(function () {\n            return factory(root);\n        });\n    } else {\n        root.LoadDate = factory(root, {});\n    }\n})(this, function (root) {\n    var Event = (function () {\n\n        var Event,\n            _default = 'default';   // 默认值\n        Event = (function () {\n            var _listen,\n                _trigger,\n                _remove,\n                _shift = Array.prototype.shift,\n                _unshift = Array.prototype.unshift,\n                namespaceCache = {},\n                _create,\n                each = function (ary, fn) {\n                    var ret;\n                    for (var i = 0, l = ary.length; i < l; i++) {\n                        var n = ary[i];\n                        ret = fn.call(n, i, n);\n                    }\n                    return ret;\n                };\n\n            // 推入订阅的事件栈\n            _listen = function (key, fn, cache) {\n\n                // 无该事件的订阅则创建\n                if (!cache[key]) {\n                    cache[key] = [];\n                }\n\n                // 推入\n                cache[key].push(fn);\n\n                //注意:cache是对象,对象参数是对象的一个引用,内部修改是会影响到外面的\n            };\n\n            // 移除订阅\n            _remove = function (key, cache, fn) {\n                if (cache[key]) {\n                    /*\n                     * 判断有无传函数\n                     *   有:移除事件栈中的该函数\n                     *   无:移除事件栈中所有的函数\n                     * */\n                    if (fn) {\n                        for (var i = cache[key].length; i >= 0; i--) {\n                            if (cache[key] === fn) {\n                                cache[key].splice(i, 1);\n                            }\n                        }\n                    } else {\n                        cache[key] = [];\n                    }\n                }\n            };\n\n            // 发布订阅\n            _trigger = function () {\n                var cache = _shift.call(arguments), // 获取事件栈\n                    key = _shift.call(arguments),   // 获取事件名\n                    args = arguments,   // 获取发布时的传参\n                    _self = this,   // 指向函数最后return出的对象,模块接口\n                    stack = cache[key]; // 事件栈中对应该事件名的所有函数\n\n                if (!stack || !stack.length) {\n                    return;\n                }\n\n\n                // 遍历事件栈中对应该事件名的所有函数,并在模块接口对象的环境下执行\n                return each(stack, function () {\n                    return this.apply(_self, args);\n                });\n            };\n\n            // 传入事件的命名空间名,返回模块api\n            _create = function (namespace) {\n                var namespace = namespace || _default;\n                var cache = {},\n                    offlineStack = [],  // 存储已经发布的函数栈\n                    ret = {\n                        listen: function (key, fn, last) {\n                            // 创建监听\n                            _listen(key, fn, cache);\n\n                            // 后面的逻辑都是处理先发布后订阅的离线事件,如果没有则直接return跳出\n                            if (offlineStack === null) {\n                                return;\n                            }\n\n                            // 根据last是否为'last'决定是只拿最后一个函数,还是遍历执行所有已发布的函数\n                            if (last === 'last') {\n                                offlineStack.length && offlineStack.pop()();\n                            } else {\n                                each(offlineStack, function () {\n                                    this();\n                                });\n                            }\n\n                            // 结束以后置空\n                            offlineStack = null;\n                        },\n                        one: function (key, fn, last) {\n\n                            // 移除所有同名事件\n                            _remove(key, cache, fn);\n\n                            // 重新创建监听\n                            this.listen(key, fn, last);\n                        },\n                        remove: function (key, fn) {\n                            // 移除指定事件\n                            _remove(key, cache, fn);\n                        },\n                        trigger: function () {\n                            var fn,\n                                args,\n                                _self = this;   // 指向模块返回api的对象\n\n                            _unshift.call(arguments, cache);    // 把订阅函数栈也添加到参数集合中,便于模块内部调用时获取\n                            args = arguments;\n\n                            fn = function () {\n                                return _trigger.apply(_self, args);\n                            };\n\n                            // 如果offlineStack不为空,则把发布推入发布函数栈\n                            if (offlineStack) {\n                                return offlineStack.push(fn);\n                            }\n                            return fn();\n                        }\n                    };\n\n                //判断是否传了命名空间,一般情况都为true,因为默认的命名空间是'default',是有值的\n                return namespace ? (namespaceCache[namespace] ? namespaceCache[namespace] : namespaceCache[namespace] = ret) : ret;\n            };\n\n            return {\n                create: _create,\n                one: function (key, fn, last) {\n                    var event = this.create();\n                    event.one(key, fn, last);\n                },\n                remove: function (key, fn) {\n                    var event = this.create();\n                    event.remove(key, fn);\n                },\n                listen: function (key, fn, last) {\n                    var event = this.create();\n                    event.listen(key, fn, last);\n                },\n                trigger: function () {\n                    var event = this.create();\n                    event.trigger.apply(this, arguments);\n                }\n            }\n        }());\n\n        return Event;\n    }());\n    return Event;\n});"]}